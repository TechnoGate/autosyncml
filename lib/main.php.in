<?php
/**
 * vim:ft=php:fenc=UTF-8:ts=4:sts=4:sw=4:noexpandtab:foldmethod=marker:foldlevel=0:
 *
 * Copyright (c) 2010 Wael Nasreddine <wael.nasreddine@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
 * USA.
 *
 */

/** exit if AUTOSYNCML not defined */
defined('AUTOSYNCML') or die("You cannot use this file, please use @BINDIR@/autosyncml");

/** Define the copyright */
define('COPYRIGHT', 'AutosyncML version @VERSION@ by Wael Nasreddine <wael.nasreddine@gmail.com>');

/** Require all libraries */
require_once(AUTOSYNCMLLIBDIR . DIRECTORY_SEPARATOR . 'include.php');

/** Get the logger */
$logger = Logger::getInstance();

/** Get the Registry instance */
$registry = Registry::getInstance();

/** Load the configs */
$config = Settings::getInstance(ETCDIR .  DIRECTORY_SEPARATOR . 'autosyncml.ini');
$registry->set('config', $config);

/** Verify if we should be running or not */
$controlFile = $config->control_file;
if(empty($controlFile) === false) {
	if(file_exists($controlFile) === false) {
		/** The file doesn't exist, exit */
		exit();
	} else {
		/** The file exists, just remove it */
		unlink($controlFile);
	}
}

/** Prepare the database connections */
connectDbs();

/** Create the Mailman object */
$mailman = Mailman::getInstance();

/** Get the People object */
$mainPeople = new MainPeople($registry->get('main_connection'));
$copyPeople = new CopyPeople($registry->get('copy_connection'));

/** Find all people */
$logger->logEvent('GET_ALL_ROWS_FROM_ADHERENT', 'Calling the all() function of the mainPeople model', true);
$mainPeopleSearch = $mainPeople->all();

foreach($mainPeopleSearch as $person) {

	/** Get the subscribed list */
	try {
		$subscribedLists = $person->getCurrentList();
	} catch(InvalidPropertyException $e) {
		$logger->logEvent('EXCEPTION', $e->getMessage());
		continue;
	} catch(Exception $e) {
		$logger->logEvent('EXCEPTION', $e->getMessage());
		continue;
	}

	if(empty($subscribedLists)) {
		$logger->logEvent('USER_UNKNOWN', "The user " . $person->Ad_Email . " is not subscribed to any existing list, we will subscribe him to his list.", true);
		$subscribedListsList = null;
	} else {
		/** Initialize the lists array */
		$subscribedListsList = array();

		/** Get all the lists to which the user is subscribed */
		foreach($subscribedLists as $subscribedList => $subscribedEmail) {
			$subscribedListsList[] = $subscribedList;
		}

		/** Log the Event */
		$logger->logEvent('USER_KNOWN', "The user " . $person->Ad_Email . " is known and subscribed to the following lists: " . implode(', ', $subscribedListsList), true);
	}

	/** Check if the user has changed his email */
	$copy_person = $copyPeople->get($person->Ad_ID);
	$copy_person_fields = $person->toArray();
	if(!empty($copy_person->Ad_Email)) {
		/** If the email has changed, unsubscribe the old email */
		if($person->Ad_Email != $copy_person->Ad_Email) {
			/** Get the subscribed list for the old email */
			$copy_person_subscribedLists = $copy_person->getCurrentList();
			if(!empty($copy_person_subscribedLists)) {
				foreach($copy_person_subscribedLists as $subscribedList => $subscribedEmail) {
					try {
						$mailman->unsubscribeMember($subscribedList, $copy_person->Ad_Email);
					} catch(InvalidPropertyException $e) {
						$logger->logEvent('EXCEPTION', $e->getMessage());
						continue;
					} catch(Exception $e) {
						$logger->logEvent('EXCEPTION', $e->getMessage());
						continue;
					}
				}
			}
		}
	} else {
		unset($copy_person_fields['Ad_ID']);
	}

	/** Either way update the copy */
	$copy_person = $copyPeople->get()->data($copy_person_fields);
	$copy_person_saved = $copyPeople->save($copy_person);

	/** Sanity check on the copy_person */
	if(!$copy_person_saved) {
		$logger->logEvent('EXCEPTION', "Copying the user " . $person->Ad_Email . " has failed, errors: " . implode(',', $copyPeople->errors()));
	}

	/** Subscribe / Unsubscibe the user if necessary */
	try {
		$person->ensureSubscriptions($subscribedListsList);
	} catch(InvalidPropertyException $e) {
		$logger->logEvent('EXCEPTION', $e->getMessage());
		continue;
	} catch(Exception $e) {
		$logger->logEvent('EXCEPTION', $e->getMessage());
		continue;
	}
}

/** Send the logs */
$logger->sendLog();

?>