<?php
/**
 * vim:ft=php:fenc=UTF-8:ts=4:sts=4:sw=4:noexpandtab:foldmethod=marker:foldlevel=0:
 *
 * Copyright (c) 2010 Wael Nasreddine <wael.nasreddine@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
 * USA.
 *
 */

/** exit if AUTOSYNCML not defined */
defined('AUTOSYNCML') or die("You cannot use this file, please use @BINDIR@/autosyncml");

/** Define the copyright */
define('COPYRIGHT', 'AutosyncML version @VERSION@ by Wael Nasreddine <wael.nasreddine@gmail.com>');

/** Require all libraries */
require_once(AUTOSYNCMLLIBDIR . DIRECTORY_SEPARATOR . 'include.php');

/** Prepare the database connections */
connectDbs();

/** Create the Mailman object */
$mailman = Mailman::getInstance();

/** Get the logger */
$logger = Logger::getInstance();

/** Get the People object */
$mainPeople = new MainPeople();
$copyPeople = new CopyPeople();

/** Define the keys to use in adodb, must be lower case */
$id_tag = strtolower(PEOPLE_SQL_ID);
$firstname_tag = strtolower(PEOPLE_SQL_FIRSTNAME);
$lastname_tag = strtolower(PEOPLE_SQL_LASTNAME);
$email_tag = strtolower(PEOPLE_SQL_EMAIL);
$postalcode_tag = strtolower(PEOPLE_SQL_ZIPCODE);

/** Find all people */
$logger->logEvent('GET_ALL_ROWS_FROM_ADHERENT', 'Calling the find() function of the mainPeople model', true);
$mainPeopleSearch = $mainPeople->Find('');

foreach($mainPeopleSearch as $people) {
	/** Get the elements from the mainPeopleSearch */
	$id = $people->$id_tag;
	$firstName = $people->$firstname_tag;
	$lastName = $people->$lastname_tag;
	$email = $people->$email_tag;
	$postalCode = $people->$postalcode_tag;

	/** Create a person */
	$logger->logEvent('CREATE_PERSON', "id=${id}, firstName=${firstName}, email=${email}, postalCode=$postalCode");
	try {
		$person = new Person($id, $firstName, $lastName, $email, $postalCode);
	} catch(Exception $e) {
		$logger->logEvent('EXCEPTION', $e->getMessage());
		continue;
	}

	$subscribedLists = $person->getCurrentList();
	if(empty($subscribedLists)) {
		$logger->logEvent('USER_UNKNOWN', "The user ${email} is not subscribed to any existing list, we will subscribe him to his list.");
		$subscribedListsList = null;
	} else {
		/** Initialize the lists array */
		$subscribedListsList = array();

		/** Get all the lists to which the user is subscribed */
		foreach($subscribedLists as $subscribedList => $subscribedEmail) {
			$subscribedListsList[] = $subscribedList;
		}

		/** Log the Event */
		$logger->logEvent('USER_KNOWN', "The user is known and subscribed to the following lists: " . implode(', ', $subscribedListsList));
	}

	/** Subscribe / Unsubscibe the user if necessary */
	try {
		$person->ensureSubscriptions($subscribedListsList);
	} catch(Exception $e) {
		$logger->logEvent('EXCEPTION', $e->getMessage());
		continue;
	}
}

/** Send the logs */
$logger->sendLog();

?>