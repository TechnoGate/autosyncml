<?php
/**
 * vim:ft=php:fenc=UTF-8:ts=4:sts=4:sw=4:noexpandtab:foldmethod=marker:foldlevel=0:
 *
 * Copyright (c) 2010 Wael Nasreddine <wael.nasreddine@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
 * USA.
 *
 */

/**
 * connect To the database.
 *
 * @param String $adapter : The adapter to use.
 * @param String $host    : The host to connect to (for sqlite, this ain't used)
 * @param String $user    : The user to connect as (for sqlite, this ain't used)
 * @param String $pwd     : The pwd to connect as (for sqlite, this ain't used)
 * @param String $db      : The database to use.
 * @return ADODB_mysql
 */
function connectDb($adapter, $host, $user, $pwd, $db) {

	$conn = NewADOConnection($adapter);
	switch($adapter) {
	case 'mysql':
		$conn->connect($host, $user, $pwd, $db);
		break;
	case 'sqlite':
		$conn->PConnect($db);
		break;
	}

	return $conn;
}

/**
 * connect To all databases.
 *
 * @return void
 */
function connectDbs() {

	$main = connectDb(PEOPLE_SQL_ADAPTER, PEOPLE_SQL_HOST, PEOPLE_SQL_USER, PEOPLE_SQL_PWD, PEOPLE_SQL_DB);
	$copy = connectDb(PEOPLE_COPY_SQL_ADAPTER, PEOPLE_COPY_SQL_HOST, PEOPLE_COPY_SQL_USER, PEOPLE_COPY_SQL_PWD, PEOPLE_COPY_SQL_DB);

	define('MAIN_CONN', $mail);
	define('COPY_CONN', $copy);

	ADOdb_Active_Record::SetDatabaseAdapter($main, 'main');
	ADOdb_Active_Record::SetDatabaseAdapter($copy, 'copy');
}

/**
 * This function validates an email address
 * Source : http://www.linuxjournal.com/article/9585
 *
 * @param : String $email
 * @return bool True if the email is valid
 */
function validateEmailAddress($email) {

	// First, we check that there's one @ symbol,
	// and that the lengths are right.
	if (!preg_match(":^[^@]{1,64}@[^@]{1,255}$:", $email)) {
		// Email invalid because wrong number of characters
		// in one section or wrong number of @ symbols.
		return false;
	}

	// Split it into sections to make life easier
	$email_array = explode("@", $email);
	$local_array = explode(".", $email_array[0]);
	for ($i = 0; $i < sizeof($local_array); $i++) {
		if (!preg_match(":^(([A-Za-z0-9!#$%&'*+/=?^_`{|}~-][A-Za-z0-9!#$%&'*+/=?^_`{|}~\.-]{0,63})|(\"[^(\\|\")]{0,62}\"))$:", $local_array[$i])) {
			return false;
		}
	}

	// Check if domain is IP. If not,
	// it should be valid domain name
	if (!ereg("^\[?[0-9\.]+\]?$", $email_array[1])) {
		$domain_array = explode(".", $email_array[1]);
		if (sizeof($domain_array) < 2) {
			return false; // Not enough parts to domain
		}
		for ($i = 0; $i < sizeof($domain_array); $i++) {
			if (!preg_match(":^(([A-Za-z0-9][A-Za-z0-9-]{0,61}[A-Za-z0-9])|([A-Za-z0-9]+))$:", $domain_array[$i])) {
				return false;
			}
		}
	}

	return true;
}

?>