<?php
/**
 * vim:ft=php:fenc=UTF-8:ts=4:sts=4:sw=4:noexpandtab:foldmethod=marker:foldlevel=0:
 *
 * Copyright (c) 2010 Wael Nasreddine <wael.nasreddine@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
 * USA.
 *
 */

/** exit if AUTOSYNCML not defined */
defined('AUTOSYNCML') or die("You cannot use this file, please use @BINDIR@/autosyncml");

class Person extends phpDataMapper_Entity {

	/** The logger */
	protected $_logger;

	/** Is the data valid */
	protected $_validData = false;

	/**
	 * Constructor function
	 */
	public function __construct($data = null) {

		/** Get the logger */
		$this->_logger = Logger::getInstance();

		/** Send the info to the parent class */
		parent::__construct($data);
	}

	/**
	 * This function validated the data, throws exception where it's necessary
	 *
	 * @return void
	 * @throws InvalidProperty
	 */
	protected function validateData() {

		if($this->_validData === true) {
			return;
		}

		/** Create a new instance of the departments class */
		$departments = new Departements();

		if(empty($this->Ad_ID)) {
			throw new InvalidPropertyException("Ad_ID", "The id can't be empty!");
		}

		if(empty($this->Ad_Prenom)) {
			throw new InvalidPropertyException("Ad_Prenom", "The firstName can't be empty");
		}

		if(empty($this->Ad_Nom)) {
			throw new InvalidPropertyException("Ad_Nom", "The lastName can't be empty");
		}

		if(empty($this->Ad_Email)) {
			throw new InvalidPropertyException("Ad_Email", "The email can't be empty");
		} elseif(validateEmailAddress($this->Ad_Email) === false) {
			throw new InvalidPropertyException("Ad_Email", "The email " . $this->Ad_Email . " is not a valid email address.");
		}

		if(empty($this->Ad_Code)) {
			throw new InvalidPropertyException("Ad_Code", "The postal code can't be empty");
		} elseif($departments->checkPostCode($this->Ad_Code) === false) {
			throw new InvalidPropertyException("Ad_Code", "The postal code " . $this->Ad_Code . " is not a valid postal code.");
		}

		/** Mark the data as valid (at this point) */
		$this->_validData = true;
	}

	public function getCurrentList() {

		/** Validate the data */
		$this->validateData();

		$mailman = Mailman::getInstance();
		$matches = $mailman->find('#' . mb_strtolower($this->Ad_Email, 'UTF-8') . '#');

		return $matches;
	}

	public function getLists() {

		/** Validate the data */
		$this->validateData();

		/** Initialize the lists */
		$lists = array('Membres');

		/** get the list by zip code */
		$list = $this->_getListByPostCode();
		if(!empty($list)) {
			$lists[] = $list;
		}

		/** get the list by speciality */
		$list = $this->_getListBySpeciality();
		if(!empty($list)) {
			$lists[] = $list;
		}

		return $lists;
	}

	/**
	 * This function return the list based on the zip code
	 *
	 * @return String | Int
	 */
	protected function _getListByPostCode() {

		/** Validate the data */
		$this->validateData();

		/** Create a new instance of the departments class */
		$departments = new Departements();

		/** get the list */
		$list = $departments->getDepartementCodeByZipCode($this->Ad_Code);

		/** If there's no list found, suppose it's lebanon */
		if($list === false) {
			$list = 'Liban';
		}

		return $list;
	}

	/**
	 * This function return the list based on this person speciality
	 *
	 * @return String | null
	 */
	protected function _getListBySpeciality() {

		/** Validate the data */
		$this->validateData();

		/** Initialize the list */
		$list = null;

		switch($this->Ad_Specialite) {
		case 'Informatique':
			$list = 'Informaticiens';
			break;
		}

		return $list;
	}

	/**
	 * This function ensure that this user is subscribed to and only to the calculated lists using $this->getLists()
	 *
	 * @return void
	 */
	public function ensureSubscriptions($currentSubscriptions = null) {

		/** Validate the data */
		$this->validateData();

		/** Get an instance of the Mailman class */
		$mailman = Mailman::getInstance();

		/** The lists the user should be subscribed to */
		$lists = $this->getLists();

		/** If the current Subscriptions is not null, un-subscribe the user from anything other than where he supposed to be */
		if($currentSubscriptions !== null && is_array($currentSubscriptions)) {
			foreach($currentSubscriptions as $currentSubscription) {
				if(in_array($currentSubscription, $lists) === false) {
					$this->_logger->logEvent('UNSUBSCRIBE_USER', "Unsubscribing the user from the list ${currentSubscription}", true);
					$mailman->unsubscribeMember($currentSubscription, $this->Ad_Email);
				}
			}
		}

		/** Subscribe this member */
		foreach($lists as $list) {
			if($currentSubscriptions === null || (is_array($currentSubscriptions) && in_array($list, $currentSubscriptions) === false)) {
				$mailman->subscribeMember($list, $this->Ad_Email);
			} else {
				$this->_logger->logEvent('SUBSCRIBE_USER', "The user " . $this->Ad_Email . " has been skiped, he's already subscribed to the list ${list}", true);
			}
		}
	}
}

?>