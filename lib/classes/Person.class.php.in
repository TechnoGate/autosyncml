<?php
/**
 * vim:ft=php:fenc=UTF-8:ts=4:sts=4:sw=4:noexpandtab:foldmethod=marker:foldlevel=0:
 *
 * Copyright (c) 2010 Wael Nasreddine <wael.nasreddine@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
 * USA.
 *
 */

/** exit if AUTOSYNCML not defined */
defined('AUTOSYNCML') or die("You cannot use this file, please use @BINDIR@/autosyncml");

class Person {

	/** This person's properties */
	private $_id;
	private $_firstName;
	private $_lastName;
	private $_email;
	private $_postalCode;

	/** The logger */
	protected $_logger;

	/**
	 * Constructor
	 *
	 * @param Int      $id          : The id in the database.
	 * @param String   $firstName   : The firstName
	 * @param String   $lastName    : The lastName
	 * @param String   $email       : The email
	 * @param Int      $postalCode  : French postal code, 5 or 6 chars
	 * @return Person
	 */
	public function __construct($id, $firstName, $lastName, $email, $postalCode) {

		/** Get the logger */
		$this->_logger = Logger::getInstance();

		/** Validate the data */
		$this->validateData($id, $firstName, $lastName, $email, $postalCode);

		/** Record the properties */
		$this->_id = $id;
		$this->_firstName = $firstName;
		$this->_lastName = $lastName;
		$this->_email = $email;
		$this->_postalCode = $postalCode;
	}

	/**
	 * This function validated the data, throws exception where it's necessary
	 *
	 * @param Int      $id          : The id in the database.
	 * @param String   $firstName   : The firstName
	 * @param String   $lastName    : The lastName
	 * @param String   $email       : The email
	 * @param Int      $postalCode  : French postal code, 5 or 6 chars
	 * @return bool
	 */
	protected function validateData($id, $firstName, $lastName, $email, $postalCode) {

		/** Create a new instance of the departments class */
		$departments = new Departements();

		if(empty($id)) {
			throw new Exception("The id can't be empty!");
		}

		if(empty($firstName)) {
			throw new Exception("The firstName can't be empty");
		}

		if(empty($lastName)) {
			throw new Exception("The lastName can't be empty");
		}

		if(empty($email)) {
			throw new Exception("The email can't be empty");
		} elseif(validateEmailAddress($email) === false) {
			throw new Exception("The email ${email} is not a valid email address.");
		}

		if(empty($postalCode)) {
			throw new Exception("The postal code can't be empty");
		} elseif($departments->checkPostCode($postalCode) === false) {
			throw new Exception("The postal code ${postalCode} is not a valid postal code.");
		}

		return true;
	}

	public function getCurrentList() {

		$mailman = Mailman::getInstance();
		$matches = $mailman->find('#' . mb_strtolower($this->_email, 'UTF-8') . '#');

		return $matches;
	}

	public function getLists() {

		/** Initialize the lists */
		$lists = array('Membres');

		/** get the list by zip code */
		$lists[] = $this->_getListByPostCode();

		return $lists;
	}

	protected function _getListByPostCode() {

		/** Create a new instance of the departments class */
		$departments = new Departements();

		/** get the list */
		$list = $departments->getDepartementCodeByZipCode($this->_postalCode);

		/** If there's no list found, suppose it's lebanon */
		if($list === false) {
			$list = 'Liban';
		}

		return $list;
	}

	public function ensureSubscriptions($currentSubscriptions = null) {

		/** Get an instance of the Mailman class */
		$mailman = Mailman::getInstance();

		/** The lists the user should be subscribed to */
		$lists = $this->getLists();

		/** If the current Subscriptions is not null, un-subscribe the user from anything other than where he supposed to be */
		if($currentSubscriptions !== null && is_array($currentSubscriptions)) {
			foreach($currentSubscriptions as $currentSubscription) {
				if(in_array($currentSubscription, $lists) === false) {
					$this->_logger->logEvent('UNSUBSCRIBE_USER', "Unsubscribing the user from the list ${currentSubscription}", true);
					$mailman->unsubscribeMember($currentSubscription, $this->_email);
				}
			}
		}

		/** Subscribe this member */
		foreach($lists as $list) {
			if($currentSubscriptions === null || (is_array($currentSubscriptions) && in_array($list, $currentSubscriptions) === false)) {
				$mailman->subscribeMember($list, $this->_email);
			} else {
				$this->_logger->logEvent('SUBSCRIBE_USER', "The user " . $this->_email . " has been skiped, he's already subscribed to the list ${list}", true);
			}
		}
	}
}
?>