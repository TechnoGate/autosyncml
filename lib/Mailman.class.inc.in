<?php
/**
 * vim:ft=php:fenc=UTF-8:ts=4:sts=4:sw=4:noexpandtab:foldmethod=marker:foldlevel=0:
 *
 * Copyright (c) 2010 Wael Nasreddine <wael.nasreddine@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
 * USA.
 *
 */

/** exit if AUTOSYNCML not defined */
defined('AUTOSYNCML') or die("You cannot use this file, please use @BINDIR@/autosyncml");

class Mailman {

	/** The $_lists array */
	private static $_lists = array();

	/** The $_members array */
	private static $_members = array();

	/** The subscriptions modes */
	const SUBSCRIPTION_MODE_NON_DIGEST = '-r -';
	const SUBSCRIPTION_MODE_DIGEST = '-d -';

	/**
	 *  Construct
	 *
	 *  @return Mailman
	 */
	public function __construct() {}

	/**
	 *  Get all lists in mailman
	 *
	 *  @return void
	 */
	protected function _getAllLists() {

		/** Get the output of list_lists */
		$shellOutput = shell_exec("list_lists");

		/** Split the output into an array of lines */
		$shellOutput = explode("\n", $shellOutput);

		/** for each line, take only the name of the list */
		foreach($shellOutput as $outputLine) {
			preg_match('#[ \t]*([a-zA-Z0-9_\-]+) - .*#i', $outputLine, $matches);
			$ml = trim($matches[1]);
			if(!empty($ml)) {
				self::$_lists[] = $ml;
			}
		}

	}

	/**
	 *  Get all members in mailman
	 *
	 *  @return void
	 */
	protected function _getAllMembers() {

		/** Loop on each list getting the members */
		foreach(self::$_lists as $list) {
			/** Get the output of list_members ${list} */
			$shellOutput = shell_exec("list_members ${list}");

			/** Split the output into an array of lines */
			$shellOutput = explode("\n", $shellOutput);

			/** remove the empty strings */
			$members = array();
			foreach($shellOutput as $line) {
				$line = trim($line);
				if(!empty($line)) {
					$members[] = $line;
				}
			}

			/** Aggregate the list of members to the list in members */
			if(!empty($members)) {
				self::$_members[$list] = $members;
			}
		}
	}

	/**
	 *  Accessor to the available lists
	 *
	 *  @return Array
	 */
	public function getLists() {

		/** If the lists hasn't been generated, do that */
		if(empty(self::$_lists)) {
			$this->_getAllLists();
		}

		return self::$_lists;
	}

	/**
	 *  Accessor to the available members
	 *
	 *  @return Array
	 */
	public function getMembers() {

		/** If the members hasn't been generated, do that */
		if(empty(self::$_members)) {
			$this->_getAllMembers();
		}

		return self::$_members;
	}

	/**
	 *  A function used to find a members in a mailing list
	 *
	 *  @param String $pattern : RegEX pattern used to find a member in lists, preg_match compatible pattern.
	 *  @return Array : [list] => email
	 */
	public function find($pattern) {

		/** Initialize the result array */
		$foundPatterns = array();

		/** Get the members */
		$allMembers = $this->getMembers();

		/** Find the pattern */
		foreach($allMembers as $list => $members) {
			foreach($members as $member) {
				/** preg_match this member */
				preg_match($pattern, $member, $matches);
				/** If there's any results Add it to big result array */
				if(count($matches) > 0) {
					$foundPatterns[$list] = $member;
				}
			}
		}

		return $foundPatterns;
	}

	/**
	 *  Subscribe a member to a list
	 *
	 *  @param String $list  : The name of the mailing list for which we subscribe this user
	 *  @param Array $emails : An array of emails to subscribe to mailing list
	 *  @param String $mode  : The subscription mode, can either be non-digest or digest, Default : non-digest
	 *  @return bool True on sucess
	 */
	public function subscribeMember($list, $emails, $mode = self::SUBSCRIPTION_MODE_NON_DIGEST) {

		/** Sanity Check */
		$lists = $this->getLists();
		if(!in_array($list, $lists)) {
			throw new Exception("The list ${list} does not exist, you can't subscribe Members if the list doesn't exist.");
		}

		/** Aggregate emails in one string, each on a new line */
		$emailsString = implode("\n", $emails);

		/** Execute the shell command now to add these members */
		$shellOutput = shell_exec("echo \"${emailsString}\" | add_members ${mode} ${list}");
	}
}

?>